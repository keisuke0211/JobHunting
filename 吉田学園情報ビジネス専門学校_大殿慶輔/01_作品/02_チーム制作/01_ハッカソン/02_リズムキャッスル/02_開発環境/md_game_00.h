//========================================
// 
// MD:ゲーム画面[00] の処理
// Author:RIKU NISHIMURA
// 
//========================================
// *** md_game_00.h ***
//========================================
#ifndef _MD_GAME_00_H_	// このマクロ定義がされていなかった時
#define _MD_GAME_00_H_	// 二重インクルード防止のマクロを定義する

//****************************************
// 列挙型の定義
//****************************************
// MD:ゲーム画面[00] の状態
typedef enum 
{
	MD_GAME_00_STATE_NONE,		// 無し
	MD_GAME_00_STATE_NORMAL,	// 通常
	MD_GAME_00_STATE_MAX,
}MD_GAME_00_STATE;

//****************************************
// 構造体の定義
//****************************************
// MD:ゲーム画面[00] の情報構造体
typedef struct 
{
	// 状態関連
	MD_GAME_00_STATE	state;			// MD:ゲーム画面[00] の状態
	int					nCounterState;	// 状態のカウンター
}Md_game_00;

//****************************************
// プロトタイプ宣言
//****************************************
// MD:ゲーム画面[00] の情報を取得
Md_game_00 *GetMd_game_00(void);

// MD:ゲーム画面[00] の初期化処理
// MD:ゲーム画面[00] の終了処理
// MD:ゲーム画面[00] の更新処理
// MD:ゲーム画面[00] の描画処理
void InitMd_game_00(void);
void UninitMd_game_00(void);
void UpdateMd_game_00(void);
void DrawMd_game_00(void);

// MD:ゲーム画面[00] の状態を設定
void SetMd_game_00State(MD_GAME_00_STATE state);

#endif